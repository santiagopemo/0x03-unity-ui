0x03. Unity - UI
 Specializations - AR/VR ― Unity

 by Carrie Ybay, Software Engineer at Holberton School

 Ongoing project - started 01-04-2021, must end by 01-08-2021 (in 3 days) - you're done with 0% of tasks.

 Checker will be released at 01-06-2021 12:00 AM

 Manual QA review must be done (request it when you are done with the project)

 QA review fully automated.

For this project, students are expected to look at this concept:

UI / UX in AR / VR
Resources
Read or watch:

Unity Manual: UI (Read sections Canvas to Interaction Components)
UI Canvas
How to make a Video Game in Unity - Score & UI
Start Menu in Unity
The Four Elements of Game Design Part 1
The Four Elements of Game Design Part 2
I Have No Words & I Must Design
Game Accessibility Guidelines
Unity Manual
Unity Manual: UI Reference
Learning Objectives
At the end of this project, you are expected to be able to explain to anyone, without the help of Google:

General
What is the Canvas
What is screen space vs world space
How to use the Rect Tool
What are anchors and how to use them
How to display and update information in the UI
What is a coroutine
How to create a menu
How to use Unity’s UI Interaction Components
What the alpha value of a color is
How to set and change material colors with scripts
What are common accessibility concepts to consider
Requirements
General
A README.md file, at the root of the folder of the project
Use Unity’s default .gitignore in your project folder
Push the entire project folder 0x03-unity-ui to your repo
Scenes and project assets such as Scripts must be organized as described in the tasks
In your scripts, all your public classes and their members should have XML documentation tags
In your scripts, all your private classes and members should be documented but without XML documentation tags
Quiz questions
Show

Tasks

0. Scoreboard mandatory
We’ll be building off the last project to add UI elements (see example).

Clone your 0x02-unity-scripting repo into a new repo called 0x03-unity-ui. Like the previous project, this project should be inside its own repo, not within a subdirectory.

Create a new Canvas GameObject:

Render Mode: Screen Space - Overlay
Pixel Perfect: Yes
UI Scale Mode: Scale With Screen Size
Inside the Canvas, create a new UI Image GameObject and name it ScoreBG. Anchor it to the top right of the game window using Anchor Presets.

Pos X: -80
Pos Y: -40
Width: 100
Height: 30
Image color: #000000
Alpha: 200
Create a new Text GameObject named ScoreText. Make ScoreText a child of ScoreBG. Anchor ScoreText to the middle of ScoreBG using Anchor Presets.

Width: 100
Height: 30
Text: Score: 0
Font size: 18
Alignment: Center + Middle
Horizontal Overflow: Overflow
Font color: #FFFFFF


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

1. What does "new high score" mean? Is that bad? Did I break it? mandatory
Edit the PlayerController.cs script. Create a new public Text scoreText variable. In the Inspector, set the value of the scoreText field to your ScoreText GameObject.

Create a new method void SetScoreText().

When called, this method should update the ScoreText object with the Player‘s current score.
Remove or comment out your Debug.Log line printing score to the Console.


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

2. HP mandatory
Inside the existing Canvas GameObject, create a new UI Image GameObject and name it HealthBG. Anchor it to the top left of the game window using Anchor Presets.

Pos X: 80
Pos Y: -40
Width: 100
Height: 30
Image color: #FF0000
Alpha: 230
Inside the existing Canvas GameObject, create a new Text GameObject called HealthText. Make HealthText a child of HealthBG. Anchor HealthText to the middle of HealthBG using Anchor Presets.

Width: 100
Height: 30
Text: Health: 5
Font size: 18
Alignment: Center + Middle
Horizontal Overflow: Overflow
Font color: #FFFFFF


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

3. Health inspection mandatory
Edit the PlayerController.cs script. Create a new public Text healthText variable. In the Inspector, set the value of the healthText field to your HealthText GameObject.

Create a new method void SetHealthText().

When called, this method should update the HealthText object with the Player‘s current health
Remove or comment out your Debug.Log line printing health to the Console


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

4. Win, lose, or draw mandatory
Inside the existing Canvas GameObject, create a new UI Image GameObject and name it WinLoseBG. Anchor it to the center of the game window using Anchor Presets.

Pos X: 0
Pos Y: 70
Width: 200
Height: 60
Image color: #FF0000
Inside the existing Canvas GameObject, create a new Text GameObject called WinLoseText. Make WinLoseText a child of WinLoseBG. Anchor WinLoseText to the middle of WinLoseBG using Anchor Presets.

Width: 160
Height: 30
Text: Leave empty for now
Font size: 14
Alignment: Center + Middle
Horizontal Overflow: Overflow
Vertical Overflow: Truncate
Best Fit: Yes
Font color: #FFFFFF
Set WinLoseBG as inactive by unchecking the box next to the object’s name at the top of the Inspector.



Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

5. Chicken dinner mandatory
Edit the PlayerController.cs script so that when the Player touches the Goal:

You Win! displays in the WinLoseText UI element
WinLoseText‘s color changes to black
WinLoseBG’s color changes to green
Remove or comment out your Debug.Log line printing You Win! to the Console


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

6. Game over, man, game over mandatory
Edit the PlayerController.cs script so that when the Player‘s health reaches 0:

Game Over! displays in the WinLoseText UI element
WinLoseText’s color changes to white
WinLoseBG’s color changes to red
Remove or comment out your Debug.Log line printing Game Over! to the Console


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

7. Wait a second... mandatory
The transition from the Game Over! text and the scene reloading is very sudden and abrupt. Let’s use a coroutine and WaitForSeconds() to create a delay where once the Player‘s health is 0 and the Game Over! text is displayed, the scene waits 3 seconds to reload.

Create a new method IEnumerator LoadScene(float seconds):

This method should call WaitForSeconds before reloading the current scene
To utilize this method as a coroutine, call it with StartCoroutine() (ex. StartCoroutine(LoadScene(3)))


Let’s also use this method when the player wins to restart the game. Call LoadScene() when Player reaches the Goal.



Repo:

GitHub repository: 0x03-unity-ui
File: Assets/maze.unity

8. What's on the menu mandatory
Create a new scene called menu in the Project window. Add a new UI Panel GameObject called MenuBG:

Color: #313131
Alpha: 200
Inside the existing Canvas GameObject, create an empty GameObject called MainMenu. Anchor it to the center of the game window with Anchor Presets.

Width: 250
Height: 200
Inside MainMenu, create three UI Button GameObjects PlayButton, OptionsButton, QuitButton. Anchor them to the center of the game window using Anchor Presets.

PlayButton Pos Y: 60
OptionsButton Pos Y: 0
QuitButton Pos Y: -60
Width: 180
Height: 40
Normal Color: #FFFFFF
Highlighted Color: #9EECBC
Pressed Color: #A9A9A9


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/menu.unity

9. Let's play mandatory
Create a new C# script MainMenu.cs. Create a new method public void PlayMaze().

This method should load the maze scene when the Play button is pressed.
Under File > Build Settings, add your menu and maze scenes to the build.


Inside the PlayerController.cs script, update the Update() script to check if the player presses the Esc key. If the Esc key is pressed, load the menu scene.

Repo:

GitHub repository: 0x03-unity-ui
File: Assets/menu.unity, Assets/Scripts/MainMenu.cs

10. We're not retreating, we're advancing! Toward future victory! mandatory
Inside the MainMenu.cs script, create a new method public void QuitMaze().

This method should close the game window when the Quit button is pressed.
Since this will not work in the Unity editor preview, add a Debug.Log() message that writes Quit Game to the Console when the Quit button is pressed.


Repo:

GitHub repository: 0x03-unity-ui
File: Assets/menu.unity, Assets/Scripts/MainMenu.cs

11. A narrow variety of options mandatory
Inside the existing Canvas GameObject, create an empty GameObject called OptionsMenu. Anchor it to the center of the game window with Anchor Presets.

Width: 250
Height: 200
Create a new UI Text GameObject called OptionsTitle and anchor it to the top center of the OptionsMenu GameObject using Anchor Presets.

Width: 160
Height: 30
Text: OPTIONS
Font Style: Bold
Font Size: 24
Alignment: Center + Middle
Horizontal Overflow: Overflow
Color: #FFFFFF
Duplicate one of the buttons from the MainMenu and rename it to BackButton. Change the text to Back. Anchor it to the bottom center of the Options Menu GameObject using Anchor Presets.

Set the OptionsMenu GameObject to inactive by unchecking the box next to the object’s name at the top of the Inspector.

Now, instead of creating a script to switch between the MainMenu and OptionsMenu, use the UI Button’s built-in OnClick() event instead.

MainMenu > OptionsButton: Create OnClick() events so that when this button is pressed, it sets OptionsMenu as active and MainMenu as inactive
OptionsMenu > BackButton: Create OnClick() events so that when this button is pressed, it sets MainMenu as active and OptionsMenu as inactive




Repo:

GitHub repository: 0x03-unity-ui
File: Assets/menu.unity, Assets/Scripts/MainMenu.cs

12. Accessibility mandatory
Having red traps and a green goal isn’t very accessible design for certain types of colorblindness. Ideally in game design, it would be better to avoid color coding important mechanics or objects entirely. For the sake of this UI project, we’ll add a Colorblind Mode option for our maze.

Add a UI Toggle GameObject called ColorblindMode to the OptionsMenu GameObject.

Toggle Label: Colorblind Mode
Label Text Alignment: Left + Middle
Position the checkbox on the right of the label as shown in the screenshots below
Edit the MainMenu.cs script and add three new variables:

public Material trapMat
public Material goalMat
public Toggle colorblindMode
In the Inspector, assign the materials trap and goal and the toggle ColorblindMode to their respective variables.

Within PlayMaze(), check if colorblindMode is toggled on. If it is, change the trap and goal material colors:

trap material color: new Color32(255, 112, 0, 1) (See: Material.color, Color32)
goal material color: Color.blue


Otherwise, the maze should load with materials as their original red and green colors.



Repo:

GitHub repository: 0x03-unity-ui
File: Assets/menu.unity, Assets/Scripts/MainMenu.cs
